[{"/home/peter/projects/mtrack/mtrack/frontend/src/services/api.service.js":"1","/home/peter/projects/mtrack/mtrack/frontend/src/actions/column.actions.js":"2","/home/peter/projects/mtrack/mtrack/frontend/src/constants/column.constants.js":"3","/home/peter/projects/mtrack/mtrack/frontend/src/reducers/column.reducer.js":"4","/home/peter/projects/mtrack/mtrack/frontend/src/components/Column.js":"5","/home/peter/projects/mtrack/mtrack/frontend/src/components/Board.js":"6","/home/peter/projects/mtrack/mtrack/frontend/src/components/CreateColumnButton.js":"7","/home/peter/projects/mtrack/mtrack/frontend/src/actions/board.actions.js":"8","/home/peter/projects/mtrack/mtrack/frontend/src/actions/card.actions.js":"9","/home/peter/projects/mtrack/mtrack/frontend/src/index.js":"10","/home/peter/projects/mtrack/mtrack/frontend/src/reducers/alert.reducer.js":"11","/home/peter/projects/mtrack/mtrack/frontend/src/reducers/board.reducer.js":"12","/home/peter/projects/mtrack/mtrack/frontend/src/reducers/card.reducer.js":"13","/home/peter/projects/mtrack/mtrack/frontend/src/actions/user.actions.js":"14","/home/peter/projects/mtrack/mtrack/frontend/src/components/BoardCard.js":"15","/home/peter/projects/mtrack/mtrack/frontend/src/reducers/authentication.reducer.js":"16","/home/peter/projects/mtrack/mtrack/frontend/src/components/BoardCardGrid.js":"17","/home/peter/projects/mtrack/mtrack/frontend/src/reducers/user.reducer.js":"18","/home/peter/projects/mtrack/mtrack/frontend/src/actions/alert.actions.js":"19","/home/peter/projects/mtrack/mtrack/frontend/src/components/Card.js":"20","/home/peter/projects/mtrack/mtrack/frontend/src/reportWebVitals.js":"21","/home/peter/projects/mtrack/mtrack/frontend/src/services/user.service.js":"22","/home/peter/projects/mtrack/mtrack/frontend/src/helpers/store.js":"23","/home/peter/projects/mtrack/mtrack/frontend/src/components/App.js":"24","/home/peter/projects/mtrack/mtrack/frontend/src/constants/card.constants.js":"25","/home/peter/projects/mtrack/mtrack/frontend/src/constants/board.constants.js":"26","/home/peter/projects/mtrack/mtrack/frontend/src/constants/alert.constants.js":"27","/home/peter/projects/mtrack/mtrack/frontend/src/components/CreateBoardCard.js":"28","/home/peter/projects/mtrack/mtrack/frontend/src/components/Login.js":"29","/home/peter/projects/mtrack/mtrack/frontend/src/components/Home.js":"30"},{"size":10159,"mtime":1609826483580,"results":"31","hashOfConfig":"32"},{"size":3102,"mtime":1609741326812,"results":"33","hashOfConfig":"32"},{"size":577,"mtime":1609490584444,"results":"34","hashOfConfig":"32"},{"size":1250,"mtime":1609557428601,"results":"35","hashOfConfig":"32"},{"size":10089,"mtime":1609820553494,"results":"36","hashOfConfig":"32"},{"size":6329,"mtime":1609995964873,"results":"37","hashOfConfig":"32"},{"size":5180,"mtime":1609996041345,"results":"38","hashOfConfig":"32"},{"size":2952,"mtime":1609535190047,"results":"39","hashOfConfig":"32"},{"size":4788,"mtime":1609826429886,"results":"40","hashOfConfig":"32"},{"size":827,"mtime":1609556757010,"results":"41","hashOfConfig":"32"},{"size":487,"mtime":1609040093301,"results":"42","hashOfConfig":"32"},{"size":1569,"mtime":1609555304723,"results":"43","hashOfConfig":"32"},{"size":3310,"mtime":1609826470653,"results":"44","hashOfConfig":"32"},{"size":1704,"mtime":1609389444349,"results":"45","hashOfConfig":"32"},{"size":3318,"mtime":1609555747813,"results":"46","hashOfConfig":"32"},{"size":701,"mtime":1609389444349,"results":"47","hashOfConfig":"32"},{"size":1142,"mtime":1609389444349,"results":"48","hashOfConfig":"32"},{"size":422,"mtime":1609389444349,"results":"49","hashOfConfig":"32"},{"size":361,"mtime":1609040093301,"results":"50","hashOfConfig":"32"},{"size":4145,"mtime":1609804363333,"results":"51","hashOfConfig":"32"},{"size":362,"mtime":1608364367010,"results":"52","hashOfConfig":"32"},{"size":1770,"mtime":1609389444349,"results":"53","hashOfConfig":"32"},{"size":1212,"mtime":1609556790238,"results":"54","hashOfConfig":"32"},{"size":1438,"mtime":1609995377612,"results":"55","hashOfConfig":"32"},{"size":679,"mtime":1609558137886,"results":"56","hashOfConfig":"32"},{"size":559,"mtime":1609389444349,"results":"57","hashOfConfig":"32"},{"size":115,"mtime":1609040093301,"results":"58","hashOfConfig":"32"},{"size":4476,"mtime":1609389444349,"results":"59","hashOfConfig":"32"},{"size":7040,"mtime":1609995442765,"results":"60","hashOfConfig":"32"},{"size":2394,"mtime":1609995812089,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},"1w6sn08",{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":1,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/peter/projects/mtrack/mtrack/frontend/src/services/api.service.js",["137","138"],"import { RepeatOneSharp } from '@material-ui/icons';\nimport axios from 'axios';\nimport { dispatch } from 'rxjs/internal/observable/pairs';\nimport { userService } from './user.service';\n\nexport const apiService = {\n    getAllBoardsForUser,\n    getUserBoard,\n    createUserBoard,\n    removeUserBoard,\n    getAllColumns,\n    createColumn,\n    updateColumn,\n    removeColumn,\n    getAllCards,\n    getCard,\n    createCard,\n    updateCard,\n    updateAllCards,\n    removeCard\n};\n\nfunction getAllBoardsForUser(user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token }\n    };\n\n    return axios({\n        method: requestOptions.method,\n        url: process.env.REACT_APP_API_URL + '/boards',\n        headers: requestOptions.headers,\n    })\n    .then(handleResponse)\n    .then(boards => {\n        return boards;\n    })\n    .catch(handleError);\n}\n\nfunction getUserBoard(boardId, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token }\n    };\n\n    return axios({\n        method: requestOptions.method,\n        url: process.env.REACT_APP_API_URL + '/boards/' + boardId,\n        headers: requestOptions.headers,\n    })\n    .then(handleResponse)\n    .then(board => {\n        return board;\n    })\n    .catch(handleError);\n}\n\nfunction createUserBoard(name, description, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token },\n        body: JSON.stringify({ board: { name: name, description: description }})\n    };\n\n    return axios({\n        method: requestOptions.method,\n        headers: requestOptions.headers,\n        url: process.env.REACT_APP_API_URL + '/boards',\n        data: requestOptions.body\n    })\n    .then(handleResponse)\n    .then(board => {\n        return board;\n    })\n    .catch(handleError);\n}\n\nfunction removeUserBoard(boardId, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token }\n    }\n\n    return axios({\n        method: requestOptions.method,\n        url: process.env.REACT_APP_API_URL + '/boards/' + boardId,\n        headers: requestOptions.headers,\n    })\n    .then(handleResponse)\n    .then(board => {\n        return board;\n    })\n    .catch(handleError);\n\n}\n\n\n\nfunction getAllColumns(boardId, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token }\n    };\n\n    return axios({\n        method: requestOptions.method,\n        url: process.env.REACT_APP_API_URL + '/boards/' + boardId + '/columns',\n        headers: requestOptions.headers,\n    })\n    .then(handleResponse)\n    .then(columns => {\n        return columns;\n    })\n    .catch(handleError);\n}\n\nfunction createColumn(title, boardId, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token },\n        body: JSON.stringify({ column: { title: title }})\n    };\n\n    return axios({\n        method: requestOptions.method,\n        headers: requestOptions.headers,\n        url: process.env.REACT_APP_API_URL + '/boards/' + boardId + '/columns',\n        data: requestOptions.body\n    })\n    .then(handleResponse)\n    .then(column => {\n        return column;\n    })\n    .catch(handleError);\n}\n\nfunction updateColumn(title, boardId, columnId, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token },\n        body: JSON.stringify({ column: { title: title }})\n    };\n\n    return axios({\n        method: requestOptions.method,\n        headers: requestOptions.headers,\n        url: process.env.REACT_APP_API_URL + '/boards/' + boardId + '/columns/' + columnId,\n        data: requestOptions.body\n    })\n    .then(handleResponse)\n    .then(column => {\n        return column;\n    })\n    .catch(handleError);\n}\n\nfunction removeColumn(boardId, columnId, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token }\n    }\n\n    return axios({\n        method: requestOptions.method,\n        url: process.env.REACT_APP_API_URL + '/boards/' + boardId + '/columns/' + columnId,\n        headers: requestOptions.headers,\n    })\n    .then(handleResponse)\n    .then(column => {\n        return column;\n    })\n    .catch(handleError);\n}\n\n\nfunction getAllCards(boardId, columnId, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token }\n    };\n\n    return axios({\n        method: requestOptions.method,\n        url: process.env.REACT_APP_API_URL + '/boards/' + boardId + '/columns/' + columnId + '/cards',\n        headers: requestOptions.headers,\n    })\n    .then(handleResponse)\n    .then(cards => {\n        return cards;\n    })\n    .catch(handleError);\n}\n\nfunction getCard(boardId, columnId, cardId, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token }\n    };\n\n    return axios({\n        method: requestOptions.method,\n        url: process.env.REACT_APP_API_URL + '/boards/' + boardId + '/columns/' + columnId + '/cards/' + cardId,\n        headers: requestOptions.headers,\n    })\n    .then(handleResponse)\n    .then(card => {\n        return card;\n    })\n    .catch(handleError);\n}\n\nfunction createCard(title, description, position, boardId, columnId, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token },\n        body: JSON.stringify({ card: { title: title, description: description, position: position }})\n    };\n\n    return axios({\n        method: requestOptions.method,\n        headers: requestOptions.headers,\n        url: process.env.REACT_APP_API_URL + '/boards/' + boardId + '/columns/' + columnId + '/cards',\n        data: requestOptions.body\n    })\n    .then(handleResponse)\n    .then(card => {\n        return card;\n    })\n    .catch(handleError);\n}\n\nfunction updateCard(title, description, position, boardId, columnId, cardId, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token },\n        body: JSON.stringify({ card: { title: title, description: description, position: position }, update_column_id: columnId})\n    };\n\n    return axios({\n        method: requestOptions.method,\n        headers: requestOptions.headers,\n        url: process.env.REACT_APP_API_URL + '/boards/' + boardId + '/columns/' + columnId + '/cards/' + cardId,\n        data: requestOptions.body\n    })\n    .then(handleResponse)\n    .then(card => {\n        return card;\n    })\n    .catch(handleError);\n}\n\nfunction updateAllCards(reorderedCards, boardId, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token },\n        body: JSON.stringify({ cards : reorderedCards })\n    }\n\n    return axios({\n        method: requestOptions.method,\n        headers: requestOptions.headers,\n        url: process.env.REACT_APP_API_URL + '/boards/' + boardId + '/cards',\n        data: requestOptions.body\n    })\n    .then(handleResponse)\n    .then(cards => {\n        return cards;\n    })\n    .catch(handleError);\n}\n\nfunction removeCard(boardId, columnId, cardId, user) {\n    if(!user) {\n        return Promise.reject(\"Not logged in\");\n    }\n\n    const requestOptions = {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json', 'Authorization': user.token }\n    }\n\n    return axios({\n        method: requestOptions.method,\n        url: process.env.REACT_APP_API_URL + '/boards/' + boardId + '/columns/' + columnId + '/cards/' + cardId,\n        headers: requestOptions.headers,\n    })\n    .then(handleResponse)\n    .then(card => {\n        return card;\n    })\n    .catch(handleError);\n}\n\n\nfunction handleResponse(response) {\n    const data = response.data;\n\n    if (!response.status === 200) {\n        if (response.status === 401 || response.status === 403) {\n            // auto logout if 401 or 403\n            console.log('logging out');\n            userService.logout();\n            window.location.reload(true);\n        }\n    }\n\n    return data;\n}\n\nfunction handleError(error) {\n    console.log(error.response.status);\n\n    if (error.response.status === 401 || error.response.status === 403) {\n        // auto logout if 401 or 403\n        console.log('logging out');\n        userService.logout();\n        window.location.reload(true);\n    }\n\n    let errorCode = '';\n\n    switch (error.response.status) {\n        case 500:\n            errorCode = '500 Unauthorized';\n            break;\n        case 401:\n            errorCode = '401 Unauthorized';\n            break;\n        case 403:\n            errorCode = '401 Forbidden';\n            break;\n        default:\n            errorCode = 'Error';\n    }\n    return Promise.reject(errorCode);\n}","/home/peter/projects/mtrack/mtrack/frontend/src/actions/column.actions.js",["139"],"import { columnConstants } from '../constants/column.constants';\nimport { alertActions } from './alert.actions';\nimport { apiService } from '../services/api.service';\nimport { dispatch } from 'rxjs/internal/observable/pairs';\n\nexport const columnActions = {\n    getAll,\n    create,\n    update,\n    remove\n};\n\n\nfunction getAll(boardId, user) {\n    return dispatch => {\n        dispatch(request());\n\n        apiService.getAllColumns(boardId, user)\n            .then(\n                columns => {\n                    dispatch(success(columns));\n                },\n                error => {\n                    dispatch(failure(error));\n                    dispatch(alertActions.error(error.message));\n                }\n            );\n    };\n\n    function request() { return { type: columnConstants.GETALL_REQUEST } }\n    function success(columns) { return { type: columnConstants.GETALL_SUCCESS, columns} }\n    function failure(error) { return { type: columnConstants.GETALL_FAILURE, error } }\n}\n\n\nfunction create(title, boardId, user) {\n    return dispatch => {\n        dispatch(request());\n\n        apiService.createColumn(title, boardId, user)\n            .then(\n                column => {\n                    dispatch(success(column));\n                },\n                error => {\n                    dispatch(failure(error));\n                    dispatch(alertActions.error(error.message));\n                }\n            )\n    };\n\n    function request() { return { type: columnConstants.CREATE_REQUEST } }\n    function success(column) { return { type: columnConstants.CREATE_SUCCESS, column } }\n    function failure(error) { return { type: columnConstants.CREATE_FAILURE, error } }\n}\n\nfunction update(title, boardId, columnId, user) {\n    return dispatch => {\n        dispatch(request());\n\n        apiService.updateColumn(title, boardId, columnId, user)\n            .then(\n                column => {\n                    dispatch(success(column));\n                },\n                error => {\n                    dispatch(failure(error));\n                    dispatch(alertActions.error(error.message));\n                }\n            )\n    };\n\n    function request() { return { type: columnConstants.UPDATE_REQUEST } }\n    function success(column) { return { type: columnConstants.UPDATE_SUCCESS, column } }\n    function failure(error) { return { type: columnConstants.UPDATE_FAILURE, error } }\n}\n\n\nfunction remove(boardId, columnId, user) {\n    return dispatch => {\n        dispatch(request());\n\n        apiService.removeColumn(boardId, columnId, user)\n            .then(\n                column => {\n                    dispatch(success(column));\n                },\n                error => {\n                    dispatch(failure(error));\n                    dispatch(alertActions.error(error.message));\n                }\n            );\n    };\n\n    function request() { return { type: columnConstants.REMOVE_REQUEST } }\n    function success(board) { return { type: columnConstants.REMOVE_SUCCESS, board } }\n    function failure(error) { return { type: columnConstants.REMOVE_FAILURE, error } }\n}",["140","141"],"/home/peter/projects/mtrack/mtrack/frontend/src/constants/column.constants.js",[],["142","143"],"/home/peter/projects/mtrack/mtrack/frontend/src/reducers/column.reducer.js",[],["144","145"],"/home/peter/projects/mtrack/mtrack/frontend/src/components/Column.js",["146","147","148","149","150","151"],"import React, { useState, useRef, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Menu, MenuItem, TextField, Card, GridListTile, CardHeader, CardContent, CardActionArea, Grid, Typography, IconButton, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { columnActions } from '../actions/column.actions';\nimport { cardActions } from '../actions/card.actions';\nimport { Card as ColumnCard } from './Card';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport { Draggable } from \"react-beautiful-dnd\";\n\nconst useStyles = makeStyles({\n    column: {\n        background: '#d9d9d9',\n        margin: '2vh 0.5vw',\n        width: '15vw',\n        minWidth: '300px',\n    },\n    card: {\n        background: '#d9d9d9',\n        height: '100%'\n    },\n    columnHeader: {\n        background: 'linear-gradient(70deg, #3642CF, #BF37AD)',\n        color: '#FFFFFF',\n        height: '3vh',\n        position: 'relative'\n    },\n    columnContent: {\n        height: '10vh',\n        minHeight: '20px',\n    },\n    cardContent: {\n        height: '5vh',\n        minHeight: '20px',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        background: '#FFFFFF',\n        margin: '2%',\n        borderRadius: '3px'\n    },\n    cardContentItem: {\n        margin: '1%'\n    },\n    editTitleField: {\n        background: 'rgba(255, 255, 255, 0.2)',\n        borderRadius: '3px',\n    },\n    input: {\n        color: 'rgba(255, 255, 255, 1)',\n    },\n    createCardTextField: {\n        background: 'rgba(255, 255, 255, 0.2)',\n        borderRadius: '3px',\n    },\n    createCardContent: {\n        background: '#FFFFFF',\n        margin: '2%',\n        borderRadius: '3px'\n    }\n});\n\nfunction Column(props) {\n\n    const { dispatch, column, user, board, cards, newCard, updatedCard, removedCard, updatedAllCards, updatedColumn, provided, innerRef } = props;\n\n    const columnCards = cards ? cards[column.id.toString()] : [];\n\n    const classes = useStyles();\n    \n    // State for edit column title\n    const [editingTitle, setEditingTitle] = useState(false);\n    const [editedTitle, setEditedTitle] = useState('');\n\n    // State for column menu\n    const [anchorEl, setAnchorEl] = useState(null);\n    const isMenuOpen = Boolean(anchorEl);\n\n    // State for create card\n    const [creatingCard, setCreatingCard] = useState(false);\n    const [newCardTitle, setNewCardTitle] = useState('');\n\n    const content = \"Add Card\"\n\n    useEffect(() => {\n        dispatch(cardActions.getAll(board.id, column.id, user));\n    }, [board.id, column.id, newCard, updatedCard, removedCard, updatedAllCards])\n\n    const deleteColumn = () => {\n        dispatch(columnActions.remove(board.id, column.id, user));\n        handleMenuClose();\n    }\n\n    const editTitle = () => {\n        setEditedTitle(column.title);\n        setEditingTitle(true);\n    }\n\n    const handleEditedTitleChange = (e) => {\n        const { value } = e.target;\n        setEditedTitle(value);\n    }\n\n    const closeEditTitle = () => {\n        if(editedTitle !== column.title) {\n            updateTitle();\n        } else {\n            setEditingTitle(false);\n            setEditedTitle('');\n        }\n    }\n\n    const handleMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    }\n\n    const handleMenuClose = (event) => {\n        setAnchorEl(null);\n    }\n\n    const updateTitle = () => {\n        if(editedTitle !== '' && editedTitle !== column.title) {\n            dispatch(columnActions.update(editedTitle, board.id, column.id, user));\n        }\n        setEditingTitle(false);\n        setEditedTitle('');\n    }\n\n    const createCard = () => {\n        console.log('create card');\n        if(newCardTitle !== '') {\n            let position = cards[column.id].length + 1; \n            dispatch(cardActions.create(newCardTitle, '', position, board.id, column.id, user));\n        }\n        closeCreateCard();\n    }\n\n    const handleNewCardTitleChange = (e) => {\n        const { value } = e.target;\n        setNewCardTitle(value);\n    }\n\n    const closeCreateCard = () => {\n        setCreatingCard(false);\n        setNewCardTitle('');\n    }\n\n    const openCreateCard = () => {\n        setCreatingCard(true);\n    }\n\n    return (\n        <div\n            {...provided.droppableProps}\n            ref={innerRef}\n        >\n        <GridListTile key={column.id} className={classes.column}>\n            <Card className={classes.card}>\n                { !editingTitle &&\n                    <CardHeader \n                        title={\n                            <CardActionArea onClick={editTitle}>\n                                <Typography>\n                                    {column.title}\n                                </Typography>\n                            </CardActionArea>\n                        }\n                        titleTypographyProps={{variant:'subtitle1'}}\n                        className={classes.columnHeader}\n                        action={\n                            <IconButton onClick={handleMenuOpen} aria-label=\"options\">\n                                <MoreVertIcon />\n                            </IconButton>\n                        }\n                    />\n                \n                }\n                { editingTitle &&\n                    <CardHeader\n                        className={classes.columnHeader}\n                        avatar={\n                            <form name=\"form\" onSubmit={updateTitle}>\n                                <TextField \n                                    value={editedTitle}\n                                    onChange={handleEditedTitleChange}\n                                    variant=\"filled\"\n                                    className={classes.editTitleField}\n                                    onBlur={closeEditTitle}\n                                    autoFocus\n                                    size=\"small\"\n                                    InputProps={{\n                                        className: classes.input\n                                    }}\n                                />\n                            </form>\n                        }\n                        action={\n                            <IconButton onClick={handleMenuOpen} aria-label=\"options\">\n                                <MoreVertIcon />\n                            </IconButton>\n                        }\n                    />\n                }\n                { columnCards && columnCards.map((card, index) => {\n                    return (\n                        <Draggable \n                            key={card.id} \n                            draggableId={`${card.id}`} \n                            index={card.position}\n                            disableInteractiveElementBlocking={true}\n                        >\n                            {(provided, snapshot) => (\n                                <ColumnCard \n                                    innerRef={provided.innerRef} \n                                    columnId={column.id} \n                                    card={card}\n                                    provided={provided}\n                                ></ColumnCard>\n                            )}\n                        </Draggable>\n                    );\n                })}\n                {provided.placeholder}\n                { !creatingCard &&\n                <CardActionArea onClick={openCreateCard}>\n                    <CardContent className={classes.cardContent}>\n                        <AddIcon className={classes.cardContentItem}></AddIcon>\n                        <Typography className={classes.cardContentItem}>\n                            {content}\n                        </Typography>\n                    </CardContent>\n                </CardActionArea>\n                }\n                { creatingCard &&\n                    <CardContent className={classes.createCardContent}>\n                        <form onSubmit={createCard}>\n                            <TextField \n                                value={newCardTitle}\n                                onChange={handleNewCardTitleChange}\n                                variant=\"standard\"\n                                className={classes.createCardTextField}\n                                onBlur={closeCreateCard}\n                                autoFocus\n                                fullWidth\n                                size=\"small\"\n                            />\n                            <Button>\n\n                            </Button>\n                        </form>\n                    </CardContent>\n                }\n            </Card>\n            <Menu\n                anchorEl={anchorEl}\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n                id=\"menuId\"\n                keepMounted\n                transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                open={isMenuOpen}\n                onClose={handleMenuClose}\n            >\n                <MenuItem onClick={() => deleteColumn()}>\n                    <Typography>\n                        Delete\n                    </Typography>\n                    <DeleteIcon />\n                </MenuItem>\n            </Menu>\n        </GridListTile>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    const { authentication } = state;\n    const { board } = state.board;\n    const { user } = authentication;\n    const { cards, updatedCard, removedCard, updatedAllCards, updatedColumn } = state.card;\n    const newCard = state.card.card;\n    return {\n        user,\n        board,\n        cards,\n        newCard,\n        updatedCard,\n        removedCard,\n        updatedAllCards,\n        updatedColumn\n    };\n}\n\nconst connectedColumn = connect(mapStateToProps)(Column);\nexport { connectedColumn as Column };",["152","153"],"/home/peter/projects/mtrack/mtrack/frontend/src/components/Board.js",["154","155","156","157","158","159","160","161"],"/home/peter/projects/mtrack/mtrack/frontend/src/components/CreateColumnButton.js",["162","163","164"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Card, GridListTile, CardHeader, CardContent, CardActionArea, CardActions, Typography, IconButton, TextField, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { columnActions } from '../actions/column.actions';\nimport { cardActions } from '../actions/card.actions';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles({\n    column: {\n        background: '#FFFFFF',\n        margin: '2vh 0.5vw',\n        width: '12vw',\n        minWidth: '250px',\n    },\n    cardContent: {\n        height: '5vh',\n        minHeight: '20px',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        background: 'linear-gradient(70deg, #3642CF, #BF37AD)',\n        color: '#FFFFFF',\n    },\n    cardContentItem: {\n        margin: '1%'\n    },\n    inputField: {\n        background: 'rgba(255, 255, 255, 0.2)',\n        borderRadius: '3px',\n    },\n    input: {\n        color: 'rgba(255, 255, 255, 1)',\n    },\n    createColumn: {\n        background: 'linear-gradient(70deg, #3642CF, #BF37AD)',\n        color: '#FFFFFF',\n    },\n    createButton: {\n        color: '#FFFFFF',\n        borderStyle: 'solid',\n        borderWidth: '2px',\n    },\n    cancelButton: {\n        color: '#FFFFFF',\n        borderStyle: 'solid',\n        borderWidth: '2px',\n    },\n    cardActions: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        margin: '0 0.4vw'\n    }\n});\n\nfunction CreateColumnButton(props) {\n\n    const { dispatch, user, board } = props;\n    const classes = useStyles();\n    const [clicked, setClicked] = useState(false);\n    const [columnName, setColumnName] = useState('');\n    const [columnNameError, setColumnNameError] = useState(false);\n\n    const content = \"New Column\";\n\n    const handleClick = () => {\n        setClicked(!clicked);\n        setColumnName('');\n        setColumnNameError(false);\n    }\n\n    const handleColumnNameChange = (e) => {\n        const { value } = e.target;\n        setColumnName(value);\n    }\n\n    const createColumn = (e) => {\n        e.preventDefault();\n        setColumnNameError(false);\n        if(columnName && columnName !== '') {\n            dispatch(columnActions.create(columnName, board.id, user));\n            handleClick();\n        } else {\n            setColumnNameError(true);\n        }\n    }\n\n    return (\n        <GridListTile className={classes.column}>\n            <Card>\n                { !clicked &&\n                <CardActionArea onClick={handleClick}>\n                    \n                    <CardContent className={classes.cardContent}>\n                        <AddIcon className={classes.cardContentItem}></AddIcon>\n                        <Typography className={classes.cardContentItem}>\n                            {content}\n                        </Typography>\n                    </CardContent>\n                </CardActionArea>\n                }\n                { clicked && \n                    <div className={classes.createColumn}>\n                        <form onSubmit={createColumn}>\n                            <CardContent>\n                                <TextField\n                                    label=\"Column title\"\n                                    error={columnNameError}\n                                    helperText={columnNameError ? 'Title is required' : ''}\n                                    value={columnName}\n                                    onChange={handleColumnNameChange}\n                                    variant=\"filled\"\n                                    className={classes.inputField}\n                                    autoFocus\n                                    InputProps={{\n                                        className: classes.input\n                                    }}\n                                    InputLabelProps={{\n                                        className: classes.input\n                                    }}\n                                />\n                            </CardContent>\n                            <CardActions className={classes.cardActions}>\n                                <Button className={classes.createButton} type=\"submit\">Add Column</Button>\n                                <IconButton className={classes.cancelButton} onClick={handleClick} size='small'>\n                                    <CloseIcon />\n                                </IconButton>\n                            </CardActions>\n                        </form>\n                    </div>\n                }   \n            </Card>\n        </GridListTile>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    const { authentication } = state;\n    const { user } = authentication;\n    const { board } = state.board;\n    return {\n        user,\n        board\n    };\n}\n\nconst connectedCreateColumnButton = connect(mapStateToProps)(CreateColumnButton);\nexport { connectedCreateColumnButton as CreateColumnButton };","/home/peter/projects/mtrack/mtrack/frontend/src/actions/board.actions.js",[],["165","166"],"/home/peter/projects/mtrack/mtrack/frontend/src/actions/card.actions.js",[],"/home/peter/projects/mtrack/mtrack/frontend/src/index.js",[],["167","168"],"/home/peter/projects/mtrack/mtrack/frontend/src/reducers/alert.reducer.js",[],["169","170"],"/home/peter/projects/mtrack/mtrack/frontend/src/reducers/board.reducer.js",[],"/home/peter/projects/mtrack/mtrack/frontend/src/reducers/card.reducer.js",["171"],"/home/peter/projects/mtrack/mtrack/frontend/src/actions/user.actions.js",[],["172","173"],"/home/peter/projects/mtrack/mtrack/frontend/src/components/BoardCard.js",[],"/home/peter/projects/mtrack/mtrack/frontend/src/reducers/authentication.reducer.js",[],["174","175"],"/home/peter/projects/mtrack/mtrack/frontend/src/components/BoardCardGrid.js",["176"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { boardActions } from '../actions/board.actions';\nimport { BoardCard } from './BoardCard';\nimport { CreateBoardCard } from './CreateBoardCard';\nimport { Grid } from '@material-ui/core';\n\n\nfunction BoardCardGrid(props) {\n\n    const { dispatch, user, boards, board, loadingBoards } = props;\n\n    useEffect(() => {\n        dispatch(boardActions.getAll(user));\n    }, [board]);\n\n    return (\n        <Grid container >\n            { loadingBoards && <p>Loading boards...</p>}\n            { boards && boards.map((board) => {\n                return <BoardCard key={board.id} board={board}></BoardCard>\n            })}\n            <CreateBoardCard />\n        </Grid >\n    );\n\n}\n\nconst mapStateToProps = (state) => {\n    const { authentication } = state;\n    const { user } = authentication;\n    const { boards, loadingBoards, board } = state.board;\n    return {\n        user,\n        boards,\n        loadingBoards,\n        board\n    };\n}\n\nconst connectedBoardCardGrid = connect(mapStateToProps)(BoardCardGrid);\nexport { connectedBoardCardGrid as BoardCardGrid };",["177","178"],"/home/peter/projects/mtrack/mtrack/frontend/src/reducers/user.reducer.js",[],"/home/peter/projects/mtrack/mtrack/frontend/src/actions/alert.actions.js",[],"/home/peter/projects/mtrack/mtrack/frontend/src/components/Card.js",["179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195"],"/home/peter/projects/mtrack/mtrack/frontend/src/reportWebVitals.js",[],"/home/peter/projects/mtrack/mtrack/frontend/src/services/user.service.js",[],"/home/peter/projects/mtrack/mtrack/frontend/src/helpers/store.js",[],"/home/peter/projects/mtrack/mtrack/frontend/src/components/App.js",["196","197","198"],"/home/peter/projects/mtrack/mtrack/frontend/src/constants/card.constants.js",[],"/home/peter/projects/mtrack/mtrack/frontend/src/constants/board.constants.js",[],"/home/peter/projects/mtrack/mtrack/frontend/src/constants/alert.constants.js",[],"/home/peter/projects/mtrack/mtrack/frontend/src/components/CreateBoardCard.js",["199"],"/home/peter/projects/mtrack/mtrack/frontend/src/components/Login.js",[],"/home/peter/projects/mtrack/mtrack/frontend/src/components/Home.js",["200","201","202","203","204","205","206","207"],{"ruleId":"208","severity":1,"message":"209","line":1,"column":10,"nodeType":"210","messageId":"211","endLine":1,"endColumn":24},{"ruleId":"208","severity":1,"message":"212","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":18},{"ruleId":"208","severity":1,"message":"212","line":4,"column":10,"nodeType":"210","messageId":"211","endLine":4,"endColumn":18},{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","replacedBy":"216"},{"ruleId":"213","replacedBy":"217"},{"ruleId":"215","replacedBy":"218"},{"ruleId":"213","replacedBy":"219"},{"ruleId":"215","replacedBy":"220"},{"ruleId":"208","severity":1,"message":"221","line":1,"column":27,"nodeType":"210","messageId":"211","endLine":1,"endColumn":33},{"ruleId":"208","severity":1,"message":"222","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":20},{"ruleId":"208","severity":1,"message":"223","line":4,"column":98,"nodeType":"210","messageId":"211","endLine":4,"endColumn":102},{"ruleId":"208","severity":1,"message":"224","line":12,"column":8,"nodeType":"210","messageId":"211","endLine":12,"endColumn":16},{"ruleId":"208","severity":1,"message":"225","line":72,"column":103,"nodeType":"210","messageId":"211","endLine":72,"endColumn":116},{"ruleId":"226","severity":1,"message":"227","line":94,"column":8,"nodeType":"228","endLine":94,"endColumn":81,"suggestions":"229"},{"ruleId":"213","replacedBy":"230"},{"ruleId":"215","replacedBy":"231"},{"ruleId":"208","severity":1,"message":"232","line":6,"column":20,"nodeType":"210","messageId":"211","endLine":6,"endColumn":32},{"ruleId":"208","severity":1,"message":"233","line":6,"column":34,"nodeType":"210","messageId":"211","endLine":6,"endColumn":37},{"ruleId":"208","severity":1,"message":"234","line":6,"column":39,"nodeType":"210","messageId":"211","endLine":6,"endColumn":49},{"ruleId":"208","severity":1,"message":"235","line":6,"column":51,"nodeType":"210","messageId":"211","endLine":6,"endColumn":56},{"ruleId":"208","severity":1,"message":"236","line":16,"column":10,"nodeType":"210","messageId":"211","endLine":16,"endColumn":26},{"ruleId":"237","severity":1,"message":"238","line":46,"column":26,"nodeType":"239","messageId":"240","endLine":46,"endColumn":28},{"ruleId":"226","severity":1,"message":"241","line":106,"column":8,"nodeType":"228","endLine":106,"endColumn":10,"suggestions":"242"},{"ruleId":"226","severity":1,"message":"227","line":112,"column":8,"nodeType":"228","endLine":112,"endColumn":60,"suggestions":"243"},{"ruleId":"208","severity":1,"message":"222","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":20},{"ruleId":"208","severity":1,"message":"244","line":4,"column":30,"nodeType":"210","messageId":"211","endLine":4,"endColumn":40},{"ruleId":"208","severity":1,"message":"245","line":7,"column":10,"nodeType":"210","messageId":"211","endLine":7,"endColumn":21},{"ruleId":"213","replacedBy":"246"},{"ruleId":"215","replacedBy":"247"},{"ruleId":"213","replacedBy":"248"},{"ruleId":"215","replacedBy":"249"},{"ruleId":"213","replacedBy":"250"},{"ruleId":"215","replacedBy":"251"},{"ruleId":"208","severity":1,"message":"252","line":101,"column":13,"nodeType":"210","messageId":"211","endLine":101,"endColumn":16},{"ruleId":"213","replacedBy":"253"},{"ruleId":"215","replacedBy":"254"},{"ruleId":"213","replacedBy":"255"},{"ruleId":"215","replacedBy":"256"},{"ruleId":"226","severity":1,"message":"227","line":15,"column":8,"nodeType":"228","endLine":15,"endColumn":15,"suggestions":"257"},{"ruleId":"213","replacedBy":"258"},{"ruleId":"215","replacedBy":"259"},{"ruleId":"208","severity":1,"message":"221","line":1,"column":27,"nodeType":"210","messageId":"211","endLine":1,"endColumn":33},{"ruleId":"208","severity":1,"message":"260","line":1,"column":35,"nodeType":"210","messageId":"211","endLine":1,"endColumn":44},{"ruleId":"208","severity":1,"message":"222","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":20},{"ruleId":"208","severity":1,"message":"261","line":4,"column":54,"nodeType":"210","messageId":"211","endLine":4,"endColumn":71},{"ruleId":"208","severity":1,"message":"262","line":4,"column":88,"nodeType":"210","messageId":"211","endLine":4,"endColumn":92},{"ruleId":"208","severity":1,"message":"263","line":4,"column":94,"nodeType":"210","messageId":"211","endLine":4,"endColumn":102},{"ruleId":"208","severity":1,"message":"264","line":4,"column":123,"nodeType":"210","messageId":"211","endLine":4,"endColumn":130},{"ruleId":"208","severity":1,"message":"232","line":4,"column":132,"nodeType":"210","messageId":"211","endLine":4,"endColumn":144},{"ruleId":"208","severity":1,"message":"244","line":4,"column":146,"nodeType":"210","messageId":"211","endLine":4,"endColumn":156},{"ruleId":"208","severity":1,"message":"223","line":4,"column":187,"nodeType":"210","messageId":"211","endLine":4,"endColumn":191},{"ruleId":"208","severity":1,"message":"234","line":4,"column":193,"nodeType":"210","messageId":"211","endLine":4,"endColumn":203},{"ruleId":"208","severity":1,"message":"265","line":4,"column":205,"nodeType":"210","messageId":"211","endLine":4,"endColumn":215},{"ruleId":"208","severity":1,"message":"266","line":6,"column":10,"nodeType":"210","messageId":"211","endLine":6,"endColumn":23},{"ruleId":"208","severity":1,"message":"267","line":9,"column":8,"nodeType":"210","messageId":"211","endLine":9,"endColumn":15},{"ruleId":"208","severity":1,"message":"268","line":10,"column":8,"nodeType":"210","messageId":"211","endLine":10,"endColumn":20},{"ruleId":"208","severity":1,"message":"224","line":11,"column":8,"nodeType":"210","messageId":"211","endLine":11,"endColumn":16},{"ruleId":"208","severity":1,"message":"269","line":12,"column":8,"nodeType":"210","messageId":"211","endLine":12,"endColumn":18},{"ruleId":"208","severity":1,"message":"270","line":2,"column":27,"nodeType":"210","messageId":"211","endLine":2,"endColumn":33},{"ruleId":"208","severity":1,"message":"271","line":4,"column":10,"nodeType":"210","messageId":"211","endLine":4,"endColumn":20},{"ruleId":"226","severity":1,"message":"272","line":26,"column":6,"nodeType":"228","endLine":26,"endColumn":8,"suggestions":"273"},{"ruleId":"208","severity":1,"message":"274","line":38,"column":11,"nodeType":"210","messageId":"211","endLine":38,"endColumn":18},{"ruleId":"208","severity":1,"message":"275","line":2,"column":10,"nodeType":"210","messageId":"211","endLine":2,"endColumn":14},{"ruleId":"208","severity":1,"message":"276","line":5,"column":10,"nodeType":"210","messageId":"211","endLine":5,"endColumn":22},{"ruleId":"208","severity":1,"message":"277","line":8,"column":18,"nodeType":"210","messageId":"211","endLine":8,"endColumn":34},{"ruleId":"208","severity":1,"message":"278","line":8,"column":61,"nodeType":"210","messageId":"211","endLine":8,"endColumn":67},{"ruleId":"208","severity":1,"message":"279","line":8,"column":76,"nodeType":"210","messageId":"211","endLine":8,"endColumn":85},{"ruleId":"208","severity":1,"message":"280","line":8,"column":87,"nodeType":"210","messageId":"211","endLine":8,"endColumn":103},{"ruleId":"208","severity":1,"message":"281","line":32,"column":13,"nodeType":"210","messageId":"211","endLine":32,"endColumn":17},{"ruleId":"282","severity":2,"message":"283","line":37,"column":9,"nodeType":"210","messageId":"284","endLine":37,"endColumn":17},"no-unused-vars","'RepeatOneSharp' is defined but never used.","Identifier","unusedVar","'dispatch' is defined but never used.","no-native-reassign",["285"],"no-negated-in-lhs",["286"],["285"],["286"],["285"],["286"],"'useRef' is defined but never used.","'useHistory' is defined but never used.","'Grid' is defined but never used.","'EditIcon' is defined but never used.","'updatedColumn' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["287"],["285"],["286"],"'GridListTile' is defined but never used.","'Box' is defined but never used.","'Typography' is defined but never used.","'Paper' is defined but never used.","'ContactsOutlined' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'board', 'dispatch', and 'user'. Either include them or remove the dependency array.",["288"],["289"],"'CardHeader' is defined but never used.","'cardActions' is defined but never used.",["285"],["286"],["285"],["286"],["285"],["286"],"'key' is assigned a value but never used.",["285"],["286"],["285"],["286"],["290"],["285"],["286"],"'useEffect' is defined but never used.","'DialogContentText' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'MuiCard' is defined but never used.","'IconButton' is defined but never used.","'columnActions' is defined but never used.","'AddIcon' is defined but never used.","'MoreVertIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'Router' is defined but never used.","'makeStyles' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["291"],"'history' is assigned a value but never used.","'Link' is defined but never used.","'LogoutButton' is defined but never used.","'FormControlLabel' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'CircularProgress' is defined but never used.","'user' is assigned a value but never used.","no-undef","'dispatch' is not defined.","undef","no-global-assign","no-unsafe-negation",{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"294","fix":"298"},{"desc":"299","fix":"300"},"Update the dependencies array to be: [board.id, column.id, newCard, updatedCard, removedCard, updatedAllCards, dispatch, user]",{"range":"301","text":"302"},"Update the dependencies array to be: [board, dispatch, user]",{"range":"303","text":"304"},"Update the dependencies array to be: [updatedColumn, removedColumn, createdColumn, board, dispatch, user]",{"range":"305","text":"306"},{"range":"307","text":"304"},"Update the dependencies array to be: [dispatch, history]",{"range":"308","text":"309"},[2812,2885],"[board.id, column.id, newCard, updatedCard, removedCard, updatedAllCards, dispatch, user]",[3517,3519],"[board, dispatch, user]",[3642,3694],"[updatedColumn, removedColumn, createdColumn, board, dispatch, user]",[452,459],[770,772],"[dispatch, history]"]